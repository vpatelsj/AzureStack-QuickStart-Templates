{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 2,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpool1Offset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
      },
      "type": "int"
    },
    "agentpool1Subnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpool1'."
      },
      "type": "string"
    },
    "agentpool1VMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24s_v2",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "apiServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string"
    },
    "apiServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring"
    },
    "caCertificate": {
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      },
      "type": "string"
    },
    "caPrivateKey": {
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 CA private key used on the master."
      },
      "type": "securestring"
    },
    "clientCertificate": {
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"
      },
      "type": "string"
    },
    "clientPrivateKey": {
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"
      },
      "type": "securestring"
    },
    "cloudProviderBackoff": {
      "defaultValue": "",
      "metadata": {
        "description": "Enable cloudprovider backoff?"
      },
      "type": "string"
    },
    "cloudProviderBackoffDuration": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, how long until timeout"
      },
      "type": "string"
    },
    "cloudProviderBackoffExponent": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, retry exponent"
      },
      "type": "string"
    },
    "cloudProviderBackoffJitter": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, jitter factor between retries"
      },
      "type": "string"
    },
    "cloudProviderBackoffRetries": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, how many times to retry"
      },
      "type": "string"
    },
    "cloudProviderRatelimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Enable cloudprovider rate limiting?"
      },
      "type": "string"
    },
    "cloudProviderRatelimitBucket": {
      "defaultValue": "",
      "metadata": {
        "description": "If rate limiting enabled, bucket size"
      },
      "type": "string"
    },
    "cloudProviderRatelimitQPS": {
      "defaultValue": "",
      "metadata": {
        "description": "If rate limiting enabled, target maximum QPS"
      },
      "type": "string"
    },
    "cloudprofileActiveDirectoryEndpoint": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileActiveDirectoryEndpoint"
      },
      "type": "string"
    },
    "cloudprofileContainerRegistryDNSSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileContainerRegistryDNSSuffix"
      },
      "type": "string"
    },
    "cloudprofileGalleryEndpoint": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileGalleryEndpoint"
      },
      "type": "string"
    },
    "cloudprofileGraphEndpoint": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileGraphEndpoint"
      },
      "type": "string"
    },
    "cloudprofileKeyVaultDNSSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileKeyVaultDNSSuffix"
      },
      "type": "string"
    },
    "cloudprofileKeyVaultEndpoint": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileKeyVaultEndpoint"
      },
      "type": "string"
    },
    "cloudprofileManagementPortalURL": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileManagementPortalURL"
      },
      "type": "string"
    },
    "cloudprofileName": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileName"
      },
      "type": "string"
    },
    "cloudprofilePublishSettingsURL": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofilePublishSettingsURL"
      },
      "type": "string"
    },
    "cloudprofileResourceManagerEndpoint": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileResourceManagerEndpoint"
      },
      "type": "string"
    },
    "cloudprofileResourceManagerSelfSignedCertificate": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileResourceManagerSelfSignedCertificate"
      },
      "type": "string"
    },
    "cloudprofileResourceManagerVMDNSSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileResourceManagerVMDNSSuffix"
      },
      "type": "string"
    },
    "cloudprofileSQLDatabaseDNSSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileSQLDatabaseDNSSuffix"
      },
      "type": "string"
    },
    "cloudprofileServiceBusEndpointSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileServiceBusEndpointSuffix"
      },
      "type": "string"
    },
    "cloudprofileServiceManagementEndpoint": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileServiceManagementEndpoint"
      },
      "type": "string"
    },
    "cloudprofileServiceManagementVMDNSSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileServiceManagementVMDNSSuffix"
      },
      "type": "string"
    },
    "cloudprofileStorageEndpointSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileStorageEndpointSuffix"
      },
      "type": "string"
    },
    "cloudprofileTrafficManagerDNSSuffix": {
      "defaultValue": "",
      "metadata": {
        "description": "cloudprofileTrafficManagerDNSSuffix"
      },
      "type": "string"
    },
    "cniPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/cni-plugins-amd64-latest.tgz",
      "type": "string"
    },
    "dockerBridgeCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Docker bridge network IP address and subnet"
      },
      "type": "string"
    },
    "dockerEngineDownloadRepo": {
      "defaultValue": "https://aptdocker.azureedge.net/repo",
      "metadata": {
        "description": "The docker engine download url for kubernetes."
      },
      "type": "string"
    },
    "etcdDiskSizeGB": {
      "defaultValue": "",
      "metadata": {
        "description": "Size in GB to allocate for etcd volume"
      },
      "type": "string"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.240.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "fqdnEndpointSuffix": {
      "defaultValue": "cloudapp.azure.com",
      "metadata": {
        "description": "Endpoint of FQDN."
      },
      "type": "string"
    },
    "gcHighThreshold": {
      "defaultValue": 85,
      "metadata": {
        "description": "High Threshold for Image Garbage collection on each node"
      },
      "type": "int"
    },
    "gcLowThreshold": {
      "defaultValue": 80,
      "metadata": {
        "description": "Low Threshold for Image Garbage collection on each node."
      },
      "type": "int"
    },
    "generatorCode": {
      "defaultValue": "",
      "metadata": {
        "description": "The generator code used to identify the generator"
      },
      "type": "string"
    },
    "kubeClusterCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes cluster subnet"
      },
      "type": "string"
    },
    "kubeConfigCertificate": {
      "metadata": {
        "description": "The base 64 certificate used by cli to communicate with the master"
      },
      "type": "string"
    },
    "kubeConfigPrivateKey": {
      "metadata": {
        "description": "The base 64 private key used by cli to communicate with the master"
      },
      "type": "securestring"
    },
    "kubeDNSServiceIP": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes DNS IP"
      },
      "type": "string"
    },
    "kubeServiceCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes service address space"
      },
      "type": "string"
    },
    "kubernetesAddonManagerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesAddonResizerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for addon-resizer."
      },
      "type": "string"
    },
    "kubernetesCtrlMgrNodeMonitorGracePeriod": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes controller manager grace period for node status updates."
      },
      "type": "string"
    },
    "kubernetesCtrlMgrPodEvictionTimeout": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes controller manager pod eviction timeout."
      },
      "type": "string"
    },
    "kubernetesCtrlMgrRouteReconciliationPeriod": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes controller manager route reconciliation period."
      },
      "type": "string"
    },
    "kubernetesDNSMasqSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kube-dnsmasq-amd64."
      },
      "type": "string"
    },
    "kubernetesDashboardSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubernetes-dashboard-amd64."
      },
      "type": "string"
    },
    "kubernetesExecHealthzSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for exechealthz-amd64."
      },
      "type": "string"
    },
    "kubernetesHeapsterSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for heapster."
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesKubeDNSSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubedns-amd64."
      },
      "type": "string"
    },
    "kubernetesNodeStatusUpdateFrequency": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubelet config for node status update frequency interval."
      },
      "type": "string"
    },
    "kubernetesNonMasqueradeCidr": {
      "metadata": {
        "description": "kubernetesNonMasqueradeCidr cluster subnet"
      },
      "type": "string"
    },
    "kubernetesPodInfraContainerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for pod infra."
      },
      "type": "string"
    },
    "kubernetesTillerCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller CPU Limit."
      },
      "type": "string"
    },
    "kubernetesTillerCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller CPU Requests."
      },
      "type": "string"
    },
    "kubernetesTillerMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Memory Limit."
      },
      "type": "string"
    },
    "kubernetesTillerMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Memory Requests."
      },
      "type": "string"
    },
    "kubernetesTillerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for Helm Tiller."
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "location": {
      "defaultValue": "",
      "metadata": {
        "description": "Sets the location for all resources in the cluster"
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterOffset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the master pool where to start creating master VMs.  This value can be from 0 to 4, but must be less than masterCount."
      },
      "type": "int"
    },
    "masterSubnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24s_v2",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "maxPods": {
      "defaultValue": 110,
      "metadata": {
        "description": "The maximum number of pods per node."
      },
      "type": "int"
    },
    "nameSuffix": {
      "defaultValue": "iteration7",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "networkPolicy": {
      "allowedValues": [
        "none",
        "azure",
        "calico"
      ],
      "defaultValue": "none",
      "metadata": {
        "description": "The network policy enforcement to use (none|azure|calico)"
      },
      "type": "string"
    },
    "orchestratorName": {
      "defaultValue": "",
      "maxLength": 3,
      "metadata": {
        "description": "The orchestrator name used to identify the orchestrator.  This must be no more than 3 digits in length, otherwise it will exceed Windows Naming"
      },
      "minLength": 3,
      "type": "string"
    },
    "osImageOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Linux OS image type."
      },
      "type": "string"
    },
    "osImagePublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "OS image publisher."
      },
      "type": "string"
    },
    "osImageSKU": {
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "OS image SKU."
      },
      "type": "string"
    },
    "osImageVersion": {
      "defaultValue": "16.04.201711072",
      "metadata": {
        "description": "OS image version."
      },
      "type": "string"
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring"
    },
    "servicePrincipalClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzurePublicCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzurePublicCloud, AzureChinaCloud"
      },
      "type": "string"
    },
    "vnetCidr": {
      "defaultValue": "10.0.0.0/8",
      "metadata": {
        "description": "Cluster vnet cidr"
      },
      "type": "string"
    },
    "vnetCniLinuxPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-linux-amd64-latest.tgz",
      "type": "string"
    },
    "vnetCniWindowsPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-windows-amd64-latest.zip",
      "type": "string"
    }
  },
  "variables": {
    "agentpool1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentpool1AvailabilitySet": "[concat('agentpool1-availabilitySet-', variables('nameSuffix'))]",
    "agentpool1Count": "[parameters('agentpool1Count')]",
    "agentpool1Index": 0,
    "agentpool1Offset": "[parameters('agentpool1Offset')]",
    "agentpool1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpool1Index'))]",
    "agentpool1StorageAccountsCount": "[add(div(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),1)))]",
    "agentpool1SubnetName": "[variables('subnetName')]",
    "agentpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'), '-')]",
    "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
    "agentpool1VnetSubnetID": "[variables('vnetSubnetID')]",
    "allocateNodeCidrs": true,
    "apiServerCertificate": "[parameters('apiServerCertificate')]",
    "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
    "apiVersionDefault": "2015-06-15",
    "apiVersionLinkDefault": "2015-01-01",
    "apiVersionStorage": "2015-06-15",
    "caCertificate": "[parameters('caCertificate')]",
    "caPrivateKey": "[parameters('caPrivateKey')]",
    "clientCertificate": "[parameters('clientCertificate')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]",
    "cloudProviderBackoff": "[parameters('cloudProviderBackoff')]",
    "cloudProviderBackoffDuration": "[parameters('cloudProviderBackoffDuration')]",
    "cloudProviderBackoffExponent": "[parameters('cloudProviderBackoffExponent')]",
    "cloudProviderBackoffJitter": "[parameters('cloudProviderBackoffJitter')]",
    "cloudProviderBackoffRetries": "[parameters('cloudProviderBackoffRetries')]",
    "cloudProviderRatelimit": "[parameters('cloudProviderRatelimit')]",
    "cloudProviderRatelimitBucket": "[parameters('cloudProviderRatelimitBucket')]",
    "cloudProviderRatelimitQPS": "[parameters('cloudProviderRatelimitQPS')]",
    "cloudprofileActiveDirectoryEndpoint": "[parameters('cloudprofileActiveDirectoryEndpoint')]",
    "cloudprofileContainerRegistryDNSSuffix": "[parameters('cloudprofileContainerRegistryDNSSuffix')]",
    "cloudprofileGalleryEndpoint": "[parameters('cloudprofileGalleryEndpoint')]",
    "cloudprofileGraphEndpoint": "[parameters('cloudprofileGraphEndpoint')]",
    "cloudprofileKeyVaultDNSSuffix": "[parameters('cloudprofileKeyVaultDNSSuffix')]",
    "cloudprofileKeyVaultEndpoint": "[parameters('cloudprofileKeyVaultEndpoint')]",
    "cloudprofileManagementPortalURL": "[parameters('cloudprofileManagementPortalURL')]",
    "cloudprofileName": "[parameters('cloudprofileName')]",
    "cloudprofilePublishSettingsURL": "[parameters('cloudprofilePublishSettingsURL')]",
    "cloudprofileResourceManagerEndpoint": "[parameters('cloudprofileResourceManagerEndpoint')]",
    "cloudprofileResourceManagerSelfSignedCertificate": "[parameters('cloudprofileResourceManagerSelfSignedCertificate')]",
    "cloudprofileResourceManagerVMDNSSuffix": "[parameters('cloudprofileResourceManagerVMDNSSuffix')]",
    "cloudprofileSQLDatabaseDNSSuffix": "[parameters('cloudprofileSQLDatabaseDNSSuffix')]",
    "cloudprofileServiceBusEndpointSuffix": "[parameters('cloudprofileServiceBusEndpointSuffix')]",
    "cloudprofileServiceManagementEndpoint": "[parameters('cloudprofileServiceManagementEndpoint')]",
    "cloudprofileServiceManagementVMDNSSuffix": "[parameters('cloudprofileServiceManagementVMDNSSuffix')]",
    "cloudprofileStorageEndpointSuffix": "[parameters('cloudprofileStorageEndpointSuffix')]",
    "cloudprofileTrafficManagerDNSSuffix": "[parameters('cloudprofileTrafficManagerDNSSuffix')]",
    "cniPluginsURL": "[parameters('cniPluginsURL')]",
    "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "dataStorageAccountPrefixSeed": 97,
    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
    "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
    "dockerEngineVersion": "1.12.*",
    "etcdDiskSizeGB": "[parameters('etcdDiskSizeGB')]",
    "fqdnEndpointSuffix": "[parameters('fqdnEndpointSuffix')]",
    "gcHighThreshold": "[parameters('gcHighThreshold')]",
    "gcLowThreshold": "[parameters('gcLowThreshold')]",
    "generateProxyCertsScript": "H4sIAAAAAAAA/5RWYW/bNhT8rl9xjY06AarJTpo0TeBthqqhQbq2UzxgwTYItPRscZYoh6TrGG3++0DZliVHUrd8ish3947vjoQ7L5wJF86EqdiyPvuf/rgP3FFw690Pj7pfy99XQ0enC2chs8e1HSachLZD9sOc1k9HO6A/LqH8cQMklHoP+XDjfRwf9CvWagiqDTeV7p3/DO3e+XXoUMln6IrqYq0WnSv3xu67wPd++927G7/3Ru88v4CNDFPb/tVwwxiS1MqR9LAkpWNiEcn9hOwpT2jXaKvL26g8WKrSVQdNUtcQbSddXWmhmdN6x3J7eRcUiXD9cfDLzQfv82j83hA2bl4NHdKhM19OSArSpJxKl10c9vhb776BubzTSrsNSUlTs9r/KnWr0+pgRoIk0wSZZRruyMoWJJRKzIZUDHa21OiW7w5O+68vizJJD7AFrWA/nvffwo7YWmFweXoBM+0DZIXMH8NWy8k/6Dnux2Euy81tcke9sjBDbqS3KituWZO6sph9cQ2He+eXdbHZTNKM6Uw6n4ZqrTSlVylTmqTqFW02R8+b5ed/c9aHzUUdszuqDMAd1UxJkQ4USc4S9E9rNfpjy5Kk5TpMo4BPgynjyVLS8Qm+YppJcHCBAU5xhtc4xwXe4BJvMehfI8rQ/fkaf6L7E2x6QB/4Gy9fYiKJzfHtG1RCtMBZXioI13iyrJXkmoI8QIHOgoiruellAQDpMAq1sUWj2/Zc4Ed0G29WA1VxV6rg8uVpRZp35aDvYdMOfEqzL4RVzDWpBQsJCxZFXMzANCY040KYj2yKgdJIuKAcqCiCzdEbKOcv5Ti9ltM1CWg9UxinWYSLfr+xqt6ZYMV1HOTxKExqDQUGAwxOjd95rfmroS32vhed87zShMcI7GCSZOEcS6F5ApYkuVfgCpJYtK6LceFmmCzNTbNjYomOrQ5+ZfPNLua0Vq+wswkJsfy/kocTCtlSbctXmehpsDCkhQbDF5ZAxzt3FczEwNCzeziO14uYxMkLi08LIen8O9E+Qvc4ZBqlHwxPJ0fX0DGJSkALpn2yn2GL9+np5KgNnIe7Ab0RsMlpyZX2uFgd3EyN5rzjpmGYpSkTEYw3FL3ajC0lJlReaJ4vluRWgh650sqiRNH/bTzl/wYAAP//es/k7bwJAAA=",
    "generatorCode": "[parameters('generatorCode')]",
    "kubeClusterCidr": "[parameters('kubeClusterCidr')]",
    "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
    "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
    "kubeDNSServiceIP": "[parameters('kubeDNSServiceIP')]",
    "kubeServiceCidr": "[parameters('kubeServiceCidr')]",
    "kubernetesAPIServerIP": "[parameters('firstConsecutiveStaticIP')]",
    "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
    "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
    "kubernetesCtrlMgrNodeMonitorGracePeriod": "[parameters('kubernetesCtrlMgrNodeMonitorGracePeriod')]",
    "kubernetesCtrlMgrPodEvictionTimeout": "[parameters('kubernetesCtrlMgrPodEvictionTimeout')]",
    "kubernetesCtrlMgrRouteReconciliationPeriod": "[parameters('kubernetesCtrlMgrRouteReconciliationPeriod')]",
    "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
    "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
    "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
    "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
    "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
    "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
    "kubernetesNodeStatusUpdateFrequency": "[parameters('kubernetesNodeStatusUpdateFrequency')]",
    "kubernetesNonMasqueradeCidr": "[parameters('kubernetesNonMasqueradeCidr')]",
    "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
    "kubernetesTillerCPULimit": "[parameters('kubernetesTillerCPULimit')]",
    "kubernetesTillerCPURequests": "[parameters('kubernetesTillerCPURequests')]",
    "kubernetesTillerMemoryLimit": "[parameters('kubernetesTillerMemoryLimit')]",
    "kubernetesTillerMemoryRequests": "[parameters('kubernetesTillerMemoryRequests')]",
    "kubernetesTillerSpec": "[parameters('kubernetesTillerSpec')]",
    "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
    "locations": [
      "[resourceGroup().location]",
      "[parameters('location')]"
    ],
    "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
    "masterCount": 1,
    "masterEtcdClientPort": 2379,
    "masterEtcdClientURLs": [
      "[concat('http://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
    ],
    "masterEtcdClusterStates": [
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
    ],
    "masterEtcdPeerURLs": [
      "[concat('http://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
      "[concat('http://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
    ],
    "masterEtcdServerPort": 2380,
    "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterFqdnPrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterOffset": "[parameters('masterOffset')]",
    "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
    "masterPrivateIpAddrs": [
      "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
    ],
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), 'mstr0')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMNames": [
      "[concat(variables('masterVMNamePrefix'), '0')]",
      "[concat(variables('masterVMNamePrefix'), '1')]",
      "[concat(variables('masterVMNamePrefix'), '2')]",
      "[concat(variables('masterVMNamePrefix'), '3')]",
      "[concat(variables('masterVMNamePrefix'), '4')]"
    ],
    "masterVMSize": "[parameters('masterVMSize')]",
    "maxPods": "[parameters('maxPods')]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "mountetcdScript": "H4sIAAAAAAAA/3RSUW8TPRB896+YL8nb14uTgioVKUWVACmCNhWEJ4Qqn713Z+LYx3ndpgX+O/IlTQ8J7uXkHe/M7HjH/8nSelmq2IgxrkLybH0NG2GCJzTUEayPTMogVCDWBiVplSLlc5lqNMxtfCVlmeo4dSp53bTKTD2x1C4kU1hvWf5fplrOz85PZ+cvxBgrrwncUM9gIyq7I3OCjlqnnhBy4R73lpv+2HMhc0E3ytcUn27n6tFFbblJ5VSHrbx8TB1JpWNBvraeZJuck2dn86mIxCh24s3y0/uFNHQno9Hi5vLjerlerq4Xkx8Z+TUXV6vP1+ub1fJ6vZB3qpPOljJnYGzciGToTpktIjE7EtuNsR2KFpPnLrHNieIn6o7+BGyFL5i8RkHfMcNXwQ15AQCkm4BRFsi5KNeRMg/oeciM9ld2ljETlRVjVNY5ZE+yiqxK0QuNnmaaj4bYUdPT3zQnxwCw/wZ+DxWVOOS/oUolx/HEh0pZd0Bnh//pCBcXQ+HeqW5Ib2ArtKpjyzb4PEjkKFzEs/a/XY4HnSZQhA+8p+hhGfMmx7qPrig83WOOSX7IAbzdVHFKO345UETxoV/s233nOxRv4dTjw61lVTq6zTu3mJ/0pW8hdV65Qy0Ptn/hQVS/AwAA//8o5bmvUwMAAA==",
    "nameSuffix": "[parameters('nameSuffix')]",
    "networkPolicy": "[parameters('networkPolicy')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
    "orchestratorName": "[parameters('orchestratorName')]",
    "orchestratorNameVersionTag": "Kubernetes:1.7.10",
    "osImageOffer": "[parameters('osImageOffer')]",
    "osImagePublisher": "[parameters('osImagePublisher')]",
    "osImageSKU": "[parameters('osImageSKU')]",
    "osImageVersion": "[parameters('osImageVersion')]",
    "primaryAvailabilitySetName": "[concat('agentpool1-availabilitySet-',variables('nameSuffix'))]",
    "provisionScript": "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",
    "provisionScriptParametersCommon": "[concat('TENANT_ID=',variables('tenantID'),' SUBSCRIPTION_ID=',variables('subscriptionId'),' RESOURCE_GROUP=',variables('resourceGroup'),' LOCATION=',variables('location'),' SUBNET=',variables('subnetName'),' NETWORK_SECURITY_GROUP=',variables('nsgName'),' VIRTUAL_NETWORK=',variables('virtualNetworkName'),' VIRTUAL_NETWORK_RESOURCE_GROUP=',variables('virtualNetworkResourceGroupName'),' ROUTE_TABLE=',variables('routeTableName'),' PRIMARY_AVAILABILITY_SET=',variables('primaryAvailabilitySetName'),' SERVICE_PRINCIPAL_CLIENT_ID=',variables('servicePrincipalClientId'),' SERVICE_PRINCIPAL_CLIENT_SECRET=',variables('servicePrincipalClientSecret'),' KUBELET_PRIVATE_KEY=',variables('clientPrivateKey'),' TARGET_ENVIRONMENT=',variables('targetEnvironment'),' NETWORK_POLICY=',variables('networkPolicy'),' FQDNSuffix=',variables('fqdnEndpointSuffix'),' VNET_CNI_PLUGINS_URL=',variables('vnetCniLinuxPluginsURL'),' CNI_PLUGINS_URL=',variables('cniPluginsURL'),' MAX_PODS=',variables('maxPods'),' CLOUDPROVIDER_BACKOFF=',variables('cloudProviderBackoff'),' CLOUDPROVIDER_BACKOFF_RETRIES=',variables('cloudProviderBackoffRetries'),' CLOUDPROVIDER_BACKOFF_EXPONENT=',variables('cloudProviderBackoffExponent'),' CLOUDPROVIDER_BACKOFF_DURATION=',variables('cloudProviderBackoffDuration'),' CLOUDPROVIDER_BACKOFF_JITTER=',variables('cloudProviderBackoffJitter'),' CLOUDPROVIDER_RATELIMIT=',variables('cloudProviderRatelimit'),' CLOUDPROVIDER_RATELIMIT_QPS=',variables('cloudProviderRatelimitQPS'),' CLOUDPROVIDER_RATELIMIT_BUCKET=',variables('cloudProviderRatelimitBucket'),' USE_MANAGED_IDENTITY_EXTENSION=',variables('useManagedIdentityExtension'),' USE_INSTANCE_METADATA=',variables('useInstanceMetadata'))]",
    "provisionScriptParametersMaster": "[concat('APISERVER_PRIVATE_KEY=',variables('apiServerPrivateKey'),' CA_CERTIFICATE=',variables('caCertificate'),' CA_PRIVATE_KEY=',variables('caPrivateKey'),' MASTER_FQDN=',variables('masterFqdnPrefix'),' KUBECONFIG_CERTIFICATE=',variables('kubeConfigCertificate'),' KUBECONFIG_KEY=',variables('kubeConfigPrivateKey'),' ADMINUSER=',variables('username'))]",
    "readerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "registerWithTaints": "node-role.kubernetes.io/master=true:NoSchedule",
    "resourceGroup": "[resourceGroup().name]",
    "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
    "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
    "scope": "[resourceGroup().id]",
    "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
    "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "sshNatPorts": [
      22,
      2201,
      2202,
      2203,
      2204
    ],
    "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterFqdnPrefix'),variables('location')))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "subnet": "[parameters('masterSubnet')]",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subscriptionId": "[subscription().subscriptionId]",
    "targetEnvironment": "[parameters('targetEnvironment')]",
    "tenantId": "[subscription().tenantId]",
    "useInstanceMetadata": "false",
    "useManagedIdentityExtension": "false",
    "username": "[parameters('linuxAdminUsername')]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "virtualNetworkResourceGroupName": "''",
    "vmSizesMap": {
      "Standard_A0": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_B1ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_B1s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_B2ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_B2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_B4ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_B8ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D16_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D16s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D32_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D32s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2_Promo": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D64_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D64s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D8_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D8s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13-2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13-4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14-4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14-8_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2_Promo": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E16_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E16s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E2_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E2s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E32-16s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E32-8s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E32_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E32s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E4_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E4s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E64-16s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E64-32s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E64_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E64s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E8_v3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E8s_v3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F32s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F64s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F72s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4-4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4-8": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5-16": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5-8": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_L16s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L32s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L4s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L8s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M128ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M128s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64-16ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64-32ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64ms": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24rs_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NC24s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6s_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_ND12s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_ND24rs": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_ND24s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_ND6s": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20,
    "vnetCidr": "[parameters('vnetCidr')]",
    "vnetCniLinuxPluginsURL": "[parameters('vnetCniLinuxPluginsURL')]",
    "vnetCniWindowsPluginsURL": "[parameters('vnetCniWindowsPluginsURL')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), 'nic-', copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "primary": true,
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('agentpool1VnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpool1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpool1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpool1AvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentpool1VMNamePrefix'), 'nic-', copyIndex(variables('agentpool1Offset')))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentpool1AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpool1AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentpool1VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpool1VMNamePrefix'), 'nic-', copyIndex(variables('agentpool1Offset'))))]"
            }
          ]
        },
        "osProfile": {
          "adminPassword": "!!123abc!!123abc",
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
          "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n- path: \"/etc/kubernetes/azurestackcloud.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"name\": \"',variables('cloudprofileName'),'\",\n      \"managementPortalURL\": \"',variables('cloudprofileManagementPortalURL'),'\",\n      \"publishSettingsURL\": \"',variables('cloudprofilePublishSettingsURL'),'\",\n      \"serviceManagementEndpoint\": \"',variables('cloudprofileServiceManagementEndpoint'),'\",\n      \"resourceManagerEndpoint\": \"',variables('cloudprofileResourceManagerEndpoint'),'\",\n      \"activeDirectoryEndpoint\": \"',variables('cloudprofileActiveDirectoryEndpoint'),'\",\n      \"galleryEndpoint\": \"',variables('cloudprofileGalleryEndpoint'),'\",\n      \"keyVaultEndpoint\": \"',variables('cloudprofileKeyVaultEndpoint'),'\",\n      \"graphEndpoint\": \"',variables('cloudprofileGraphEndpoint'),'\",\n      \"storageEndpointSuffix\": \"',variables('cloudprofileStorageEndpointSuffix'),'\",\n      \"sQLDatabaseDNSSuffix\": \"',variables('cloudprofileSQLDatabaseDNSSuffix'),'\",\n      \"trafficManagerDNSSuffix\": \"',variables('cloudprofileTrafficManagerDNSSuffix'),'\",\n      \"keyVaultDNSSuffix\": \"',variables('cloudprofileKeyVaultDNSSuffix'),'\",\n      \"serviceBusEndpointSuffix\": \"',variables('cloudprofileServiceBusEndpointSuffix'),'\",\n      \"serviceManagementVMDNSSuffix\": \"',variables('cloudprofileServiceManagementVMDNSSuffix'),'\",\n      \"resourceManagerVMDNSSuffix\": \"',variables('cloudprofileResourceManagerVMDNSSuffix'),'\",\n      \"containerRegistryDNSSuffix\": \"',variables('cloudprofileContainerRegistryDNSSuffix'),'\"\n    }\n\n- path: \"/usr/local/share/ca-certificates/azurestack.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('cloudprofileResourceManagerSelfSignedCertificate'),'\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiserverCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/kubectl-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubectl extraction\n    Requires=docker.service\n    After=docker.service\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/kubectldir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/kubectldir/\"\n    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    KUBELET_CLUSTER_DNS=',variables('kubeDNSServiceIP'),'\n    KUBELET_API_SERVERS=https://',variables('kubernetesAPIServerIP'),':443\n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NETWORK_PLUGIN=kubenet\n    KUBELET_MAX_PODS=110\n    DOCKER_OPTS=\n    CUSTOM_CMD=/bin/true\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpool1\n    KUBELET_POD_INFRA_CONTAINER_IMAGE=',variables('kubernetesPodInfraContainerSpec'),'\n    KUBELET_NODE_STATUS_UPDATE_FREQUENCY=',variables('kubernetesNodeStatusUpdateFrequency'),'\n    KUBE_CTRL_MGR_NODE_MONITOR_GRACE_PERIOD=',variables('kubernetesCtrlMgrNodeMonitorGracePeriod'),'\n    KUBE_CTRL_MGR_POD_EVICTION_TIMEOUT=',variables('kubernetesCtrlMgrPodEvictionTimeout'),'\n    KUBE_CTRL_MGR_ROUTE_RECONCILIATION_PERIOD=',variables('kubernetesCtrlMgrRouteReconciliationPeriod'),'\n    KUBELET_IMAGE_GC_HIGH_THRESHOLD=',variables('gchighthreshold'),'\n    KUBELET_IMAGE_GC_LOW_THRESHOLD=',variables('gclowthreshold'),'\n\n    KUBELET_NON_MASQUERADE_CIDR=--non-masquerade-cidr=',variables('kubernetesNonMasqueradeCidr'),'\n    KUBELET_FEATURE_GATES=--feature-gates=Accelerators=true\n  \n\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RV3W7bOBO911MQaS++74JW84Nt14Uu3FhJjDh2KslIF2kg0NJY4oYiteTIjnfrd19QdhJLVrq7MGCQM3POcGYOxfuZ5PjgDMEkmpfIlfSuqzkIQCeAPyquwXipSh5B9wzoJU/AGSwQdNvo3Ifb1YMTgEGm0WNixdbG8eWSayULkHjBBXguYOKmsGCVQPdxlyuskgSM8Z84hsiwMt7x2anjP0ESWq5bDZ4759KdM5MTV5Xosj8rDW6iJDIuQZtnqp7JO3DFY8o1oSVxl0y7gs9fMr+RgybkiC/IPXn/v0JVEskPkmkoyfejNsP3I/KDrBJCxf8JFUA+kAfymWAOkmxT13BK51ymB+kPDZ/Jgh91VbCjKdgjUJMzDYdszjsS5dwQbggjJdPImSArpR+ZVpVMCSqC1l+VBjWwgthRawkIFmMq6DvvCMkRS9N33YxjXs17iSpq/m3c/rKGGPfs+NfjX97Vm0QVds709Pjk7OTTx9PjViHGVmLWJkFB6IpIwB4vl2c9TMpYA2oO5sT71ATRLQrmyOYCDKFIJLOdENxgZygvfx7quZXRdVO3Iia6kuS7QwilEtDLlcHdtuRpY6v5kgvIIN0ZdLFbLJWoCvDcFJZ9+9cym7Xp139atTx2grqS/ZeFXnVE2Blvz+r2W4a3ATtR7CF2lv5OPh0wlfVfFgfE9uLujb/fMhwWZ/SyCWgaLOD9cHp+7Qfx9DYKO9IZI9wENJp+c/tGySvGMpDo3jDJMkhHKUjkuKYhIHKZmf6/j9wVQ8j7v65nX/yxH8Wjm8Glv9mZCXHzdQnalkOeL++zy57N2hIlFzw7HMmrrwHR2y8ufcNdqpRyudCMvnz2KC9YBt7R6yFvp8N4NLkIBvH5dBINRhM/2B38qEHG0lSDMd6HXv1r+oRQqz21e6gr2It4zXYx+hafnX78cBYfb/4h4GTTZT3dNDKDtDeX2lcF9EHxBZN8AQZpyTA/0OOz1zRwiagMgqapNN7rAc7HszDyg3g4CTfd4apgXHq7bU+ohIlGoFQpUMHmIMx++yfToR+PB1/8cdhqeCJUldJSqyVPQXv1+9UR8CyZVnF1eO93o2RzUta8JwcNGTeo1/+RRgLaZ4KWosq43OvTxI/upsF1fDueXY4mzVYV7MlOZb+tN4NvVoCtntatMvWzTqsyZQh0YaUOMll7rdaF0SCahfHsdjiI/Pgi8L/O/Mn5b03CWvQ0S2jOs5xirsHkSqRe66rGl+fx1ejyKo6uAj+8mo6Hb9BYtf+UZTy9e4tk6Z3sy90fRLPAjy8HkR9234jJdBLfDMKvMz8YDP34fDQMugMD/3JUi9Q2ZtPluBtFV7G941G4cZz7kTTIhHhw7phESL+svaISyGllQPeQ6QzQ+TsAAP//YsV6AvAJAAA=\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n\n\n    exit 0\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\nruncmd:\n- echo `date`,`hostname`, startruncmd>>/opt/m \n- apt-mark hold walinuxagent\n- echo `date`,`hostname`, preaptupdate>>/opt/m \n- apt-get update\n- echo `date`,`hostname`, postaptupdate>>/opt/m \n- apt-get install -y apt-transport-https ca-certificates nfs-common\n- echo `date`,`hostname`, aptinstall>>/opt/m \n- systemctl enable rpcbind\n- systemctl enable rpc-statd\n- systemctl start rpcbind\n- systemctl start rpc-statd\n- echo `date`,`hostname`, predockerinstall>>/opt/m\n- for i in 1 2 3 4 5; do curl --max-time 60 -fsSL https://aptdocker.azureedge.net/gpg | apt-key add -; [ $? -eq 0 ] && break || sleep 5; done\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt-get update\n- apt-get install -y ebtables\n- apt-get install -y docker-engine\n- echo `date`,`hostname`, postdockerinstall>>/opt/m\n- systemctl restart docker\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\n- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m\n- /usr/lib/apt/apt.systemd.daily\n- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m\n- apt-mark unhold walinuxagent\n- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete\n- echo `date`,`hostname`, endruncmd>>/opt/m \n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "false",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(variables('agentpool1Offset')),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
        "orchestrator": "[variables('orchestratorNameVersionTag')]",
        "poolName": "agentpool1",
        "resourceNameSuffix": "[variables('nameSuffix')]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')),'/cse', copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {},
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "[concat('Microsoft.Network/routeTables/', variables('routeTableName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnet')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgID')]"
              },
              "routeTable": {
                "id": "[variables('routeTableID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443-443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "AllowAllInbound",
            "properties": {
              "access": "Allow",
              "description": "Allow All Inbound",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*",
              "direction": "Inbound",
              "priority": 200,
              "protocol": "*",
              "provisioningState": "Succeeded",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "access": "Allow",
              "description": "Allow All Outbound",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*",
              "direction": "Outbound",
              "priority": 200,
              "protocol": "*",
              "provisioningState": "Succeeded",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('routeTableName')]",
      "type": "Microsoft.Network/routeTables"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('masterLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterFqdnPrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[variables('sshNatPorts')[copyIndex(variables('masterOffset'))]]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
                }
              ],
              "primary": true,
              "privateIPAddress": "[variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('vnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex(variables('masterOffset'))))]"
            }
          ]
        },
        "osProfile": {
          "adminPassword": "!!123abc!!123abc",
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
          "customData": "[base64(concat('#cloud-config\n\npackages:\n - etcd\n - jq\n - traceroute\n\nwrite_files:\n- path: \"/etc/kubernetes/azurestackcloud.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n   {\n      \"name\": \"',variables('cloudprofileName'),'\",\n      \"managementPortalURL\": \"',variables('cloudprofileManagementPortalURL'),'\",\n      \"publishSettingsURL\": \"',variables('cloudprofilePublishSettingsURL'),'\",\n      \"serviceManagementEndpoint\": \"',variables('cloudprofileServiceManagementEndpoint'),'\",\n      \"resourceManagerEndpoint\": \"',variables('cloudprofileResourceManagerEndpoint'),'\",\n      \"activeDirectoryEndpoint\": \"',variables('cloudprofileActiveDirectoryEndpoint'),'\",\n      \"galleryEndpoint\": \"',variables('cloudprofileGalleryEndpoint'),'\",\n      \"keyVaultEndpoint\": \"',variables('cloudprofileKeyVaultEndpoint'),'\",\n      \"graphEndpoint\": \"',variables('cloudprofileGraphEndpoint'),'\",\n      \"storageEndpointSuffix\": \"',variables('cloudprofileStorageEndpointSuffix'),'\",\n      \"sQLDatabaseDNSSuffix\": \"',variables('cloudprofileSQLDatabaseDNSSuffix'),'\",\n      \"trafficManagerDNSSuffix\": \"',variables('cloudprofileTrafficManagerDNSSuffix'),'\",\n      \"keyVaultDNSSuffix\": \"',variables('cloudprofileKeyVaultDNSSuffix'),'\",\n      \"serviceBusEndpointSuffix\": \"',variables('cloudprofileServiceBusEndpointSuffix'),'\",\n      \"serviceManagementVMDNSSuffix\": \"',variables('cloudprofileServiceManagementVMDNSSuffix'),'\",\n      \"resourceManagerVMDNSSuffix\": \"',variables('cloudprofileResourceManagerVMDNSSuffix'),'\",\n      \"containerRegistryDNSSuffix\": \"',variables('cloudprofileContainerRegistryDNSSuffix'),'\"\n    }\n\n- path: \"/usr/local/share/ca-certificates/azurestack.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('cloudprofileResourceManagerSelfSignedCertificate'),'\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiServerCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: ',concat('https://', variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))], ':443'),'\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/6SVT2/jNhPG7/4Ugs5htHnfAF0I0QJBGrQBdrdujBa9jsmxzZoitTNDJe6nLyj/lxzbQO2T+HB+JJ8ZDqGxfyKxDb7M8vYuHy2tN2WWj4PJRzUKGBAoR1nmocYyy5dxigoay0gtUr4RuAG9U3nFgnWSHEzRcYrOMrFIZaaDFwpONQ48duM61E3w6KXMjtkjblCn2EVg+Y7yFmhZZkIxxSUOWI+0oauP95d+toZ5Uh+STB4F+ddVg5Q+Jw3qL9uJOtQ1JAM234mcF4vt3PxweLBKN6oUmNpyclRtTlt931r01c5Qr7TDm6+2tvIKfo50M0FqrcZHrUP0cvMzziA6mUggmOOTA+abV+QQSePvMQgM1jOEzNWn2+7fV50Lb6oh21qHczQ92XpGHQlVE0iqz58+9+MP5fv7//dU7UI0qqHQWoNUwT+R8OQUHfzMzqsCRRf7JBRdwO3fHPxg2c4TpV1kQVK2UZTcqroUbhx7soa+9AJRtFHrvHC1EGnKorj730+dN3flQw0J9yzaPDmLXsaB5CTiRwwUa0UIpkpFNzC9RRLLuLP/oLYexy+Tbgcv4z5bHCuNJGpmHQ7sSAoXu8K61SQn4lMyQVAtcXUdZomrQVLS4ZWGcwANJzZA+CMiywLBIF3HaSi8r9RJ2kbaUC740k2+BLlgypoxNGRbb7C+hP/F22CN3u7GmuqUapkjkorkTsqRkVI/U9qBratg+7eW171BTUEv0ZvqIZXs466V94uure6PRg5K9dnD1OHrFHQ/6DjRXRtBo7pu39/08VR8FwK1/kjFijP7Xv2lXrEOguq5U88C5hRiswXsI39Jw2cDd74NYv/gfZtug4s1fktp3rwe2eELgqLV3p/9ellWp5AxyKLM8l5Z5ENOC6ScnXYsh/IhqAUqnJ0Wg3k7Us32YvQbwBy9FN/AwxzNi0EvVlZqgiLWz4/OkXrab96t1q/pemy4KrM7e3hmt74MH6NHW7P7r/Rpj9ND362wAzZnzL5k9Me0k45vcTXbqwHXmb4lM7urDnpg7L8BAAD///RLoDqeCQAA\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/6SUT2/bPAzG7/kUhu+q8b5Ho+6l6P4c0gXtsDsjsa4WWfQo2l326Qc6TtM4cVNgvpl6+CP1SCK0/gdy8hTLLO//yxcbH12Z5Sty+aJBAQcC5SLLIjRYZvmmW6OxFIUpBGTTQIQaOR8VqQX7KkvbJNjoUoA1hqSYLBOPXGYjwrQBIg5xS01LEaOU2UyRRWrRKuSZktyjvBBvyky4U4DKwUfksYz5QMf6+QZqlV2rjiMKpi/bFll/H1u0N3uhpaYB9Wb81xJ58bzX5m/D8+WGZWM0w1J88nVV9MBF8OtCYwGlOKxNkiAEsiBoIjk01jtO1fU+eE8ObzV0M8myoUuCPOirYZe3u4iq58TqXXXdgP58+uXiivHJ/z5VU+dMy9R7h1zBn47xrGS/VRRbHHwuhoSrn4niJIuJxFgwTz7gSZZFllRYuLIsM+0nX0cfa6PSf4ZscHuBscHthJGQe2/RgLXURTEt+15P7gILWq+ZyGeQAcEhGwxopdJLf7T+5vreRVgHfFiDnZ5XX/0/iQw3qaHohdjUDBZNi+zJVW+At8JhWbPesOVO+lmVq0E4rdGSM9h7K56iEd8gdXIGtiJ3N6q+70RTEFMnaFifgvXBwwCcbe5B1Q9H4kl/PYWuwaUeRzp6xOOcQLHmgD00k2WN5qxAnsssn5xbfsrpgU3wazM+51nQ5NmfkprkL+W+ANQYpVgOQ8Z9dRjFy9Y8ooiP9dEuGMF9i2H7OjEnfacU3t10SmF3S+ehh/hi7/d0Gp93WQf6UOsV3b5j9yWr52lnPT/1+zLgY8bvySmFD230YPHfAAAA//86h92VlwcAAA==\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4yST48bIQzF7/kUiDtC7RE1PbeHbVdaqXcH3AkKGIQ9s8q3r0gnf3byb+c2fvYPvydDjX+wcSzklJ6+6NUuUnBKv5agVxkFAgi4lVIEGZ3Su3GDhv0Ww5iw6VngCv6s7lkwdynBBhP3aaUkYnPKF5JWkqkJCA91X3IthCROfWSvuKLvs9vC8gvlvbSdU9LGPtc5EAnbTDf39+tfzDB09VuXG6Eg/9hXbP33raL/fmz0JWeg4ObfDtZ2e2zVl+WrRw5VY3qjL/Q3Dms7QbMpbmyvJRR71hZDCSFgM5jQy7p7XOjT+uuxMpU0ZnwpIwlf7jkHgOLN2eUZo1TuI68gW6e0RfH2VtuJM0EzKW7MvPpd0MLiNSlzfDb7DjAgiX0BggHDz4AkUfbmDUUiDR9cNITwm9L+dAqLvZnTQ9PMyXps8hj6P+Tlcd3Ott/n4YUTsD4I+VnA92k3k75O+Tngc3EfyczpU0Yvgv0XAAD//91eUmRVBAAA\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5SRwU7zMBCE73mKVe6R///Qi4WQOHIoVKrEfWuvUquxHbzrVHl7lKRJCyIUjvbOfp4ZY+veKLGLQUP3vzi5YDXsoi08CVoU1AVAQE8aTvlAFVobQ+UxYE3pMuIWzTznnoV8AdDdULklM3COkeWF5BzTSYOkTAWAiUHQBUo8KKqf3gJwHmvS8DCMUyAhfho020myb8k8jrpEHHMyNDKni/dMLMsZwLRZw8YvZ08+pl7D5t/WjZddbLKnbcxhXpvNjb74sukHwQ7lqKFUJEZdvalJWC4e0L6Gpl+iX4me3Xe4DpNq3EGdEWsKoqac9tlSECd9tScRF+rfvFAyN+WaZeZGGUqyDprK+PRFNy0M/zryLuvtvTq+5l4D/KWAmcnc3DV1DTzNio8AAAD//50FSXUHAwAA\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xYS2/jNhC++1cQ7ll+JMhuINQBgnXQDbZJjTrtfUKOJcIUyfDhxvvrC0qyLEq2Y+dQ1DdxXh/nm4dk0PxvNJYrmZLNdLDmkqVkiWbDKd5Tqrx0gwIdMHCQDgiRUGBK1v4VEyZtfWA10N2p3VqHxYAQAa8obLAhpcRIdGhHXI2p8NahSWwVJiVDZzwOS01gTMkCJGRoRrFZoRim5E+kSlIucJAkyeAU/Ah3hObWJqB1dI1LMMaaVUZ++FecPy8vyJDVSAOeOtLjIiW/risv9QUeF3cDQrQyrgSe1K53gIMgJTfX1YNRTlElUvLXfBErJ47qUwYv34KBRYHUKXMsRd1sg9Z2vJm+ooNd3ueohdoW2CmZzxXCYZI2DdlXk16uk/3hiXwb1IJTsCm56l27AEfz31t4j+HoIXFYaAEOaz+t65dVLaVy4LiSjV9CLM2ReYFmBELn0Kl2arjjFESiFUvJcFibiQjccXiXpPrAdQjZpauEv1pxyd12H1Yrdi8dv+8JQmHhCo1BNveGy2xZ3ZLL7DGTqjl+eEfqQ0Lapgn5B3mWu5RMJ5PWeRWvjvWCpkgjYZ2VZURl+1fS+vCuDVobc7CPvMZtustmT0yI0mggOCeP8oB4A8LjAb+l5y4z1c8prYTKtj/KwBFZubIuVPFgpylC8DbyGu+3ukjuw9S0f0ixHfQBP7xz65qyVcIX2PLTaSGq5IpnjZfq8Ql0+2q9CbePGUCCSEkorkHjwgGXaFpBwWStZCVkmCRMFcDlrK7TkVAUxGjY0ZE2CUNsNp1Mbq47ws3sqnNSgU8YN7Nx54J7TV5AhvXorRioR/lSI71r1ATfoERrF0a9YjsZK+DCG3zJDdpcCZaSm5Y0d07/hi4uDA0uT8lwnCMIl/9MQmgm7bBT8WFY305u40YIQyNk//vLy6IlCJ3BQcxRwHYZNiSzKfnSNrWeUrS2hXPakjpeoPKuMd3fYU92m+tmKe3S3bC8KHGXBPVKJuS/JDYaF/Hiutiho/qE02q5VT+DwPhBEk/S1JgdIWj6aYKuJ2dRYNAqb2g8XwQvuOtMnAILZbYpmX6dPPGWxOCbR9vVptqXeS0O+ohcVFPjKbwNRqyfHh6EFMFiUeax24EnZkGvk4XKnLKOoTGxoHI1P9ngQc+gdWDcXNoC7NssXn3lrIgf191JAjTHxPKfGEbPpCOVKgRQYtM5D7sWzWx69XU0GU1G018Oja1aacxlAoyZERgN4zNN9Jdz1IXKkhVQLrjbzpJTk2/+vHwC+xZPvqbTQurOHgCHm/Xyvj/e9B+2+7Gi/bgoSW/JfVy0CS3YTFqh1Nrr9j5nuAIv3Mhu6CjabqShjdyNGW7G0gvR4c4bMWv2RM1BtzY/Hzcty+XM6L0tVaqU6zhsqc75m+foTtVaeAH8Xrn+7zZtL4Pkf7dpa6hnN1oH97HNd+EGublggRzeHy0PTNqFEpxuwydiWZS1wEb/Mzwfeq2UimH/xT58dXa+l5RNieDSvw/+DQAA//9hDItW0xAAAA==\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RUy27bMBC8+ysI3RklVyEuULgBemkawEDva2psE+ZDWS5d++8LSrUtOYmb8kTMLoczswSps7/AycbQKBwEoWxTvX9YQehhtrOhbdQ3go9hCZl5CLUk1MyUcrSCS2Wn1C6vwAGCdGdjbVxOAtYJvLcGjaqEM6q+00TfxYAgTX9IdxwPx74iFtyoEFvMlArkcdVRoNSROeHpmAR+ljqYIkLgO0eCQdBYaFljsbdlvJGi1OmKvhQdmKSkdIK02uE4tGuODnfTNDyVMM7csSvnIzfq6TWTO+N7cnkaVVlYr2GkUc9xabZos8PsZCAI2QAeyTDRewrtxaVWVb09duCiqBrBU7taVVqXFhPD2m7m9Z64dnZVF8xB6kutmh46TdrYluePpW0xIAvb8per5jVIMkNvSJDmT4cObD2CkFuwFWvIvcT2awhR+nzn0ySsp03J5/GS7veTtWUHM7rtncczLEaKmQ1GD6GArxlJJphSpsuNeri/92c0wWS2clzEIDjIuL1ju7cOG7SNKqovQ40ue/yIOYz5tfIFeSHZNqqqIaZOydUGLKka0Q4+UnK6L+ltTDIRTu3P4I5Xd77DfonsLT3E6Ev9v+k/81TGExlq/7qmOH2G/I68m+BDnqMnXxp7KeNp/JWWE9dpS4zaUJ+gXVtDkxBuJHyb+zO2PzB9m/ijcd0YVvl4lnAw5Vc5Hygf+NVPFFOjnA35MPsTAAD//zcsf+33BQAA\n\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xUTW/bMAy9+1cQuStpsUsrbAO6FuhlKIJm2J2WuFiLLAoSnTX79YPcfNj9SINhBcaTQNLk4+OjMbrvlLLjoGF9Xq1csBoWlNbO0JUx3AWpWhK0KKgrAI81+VxeAKuLrDBGDauuphRIKCuLuakZk33M2AemjmfGd1koqfxYXsNEUkeTPhOt5dBiwCWl6fizli1puCfDwThPFUDAll7tWoI5otlmqLzJQm2llKqGw6YazRQ7aTi53yiOw3R10fdbn9ckuOPi+hH0PXv64oJ1YTni4yiU/4CsxJ7u6UfBgNHdJu7ikdkrgGdT74fcIULbulDlrv5JRrKuFLyomn+zpqeafF2MJ7P31ib+BnaOZAqOyEl6QKp/arg463sKpiXJvHddnl0WZyZPRjidJg/ZRNJwx5ZKkWc00YNQKM/8RL43FD1vWjp2xu9zpO9LdKLoncGs4fwZly2Kab4OJjyBXmqjR6FtgQFTxfyo1im3vINZzHAQdIHSvoICTMusYV9QgVINYeyZbzjLp0Yk6tls55wOONBbTRVzLS5Jw8cDkJsdjkUk83mcOO+8n7N3ZqPhyv/CTd7HvVtToJzniWs6TApQgNySDF0AEaXRMJlNxt6hvPeNgxOH/oY8bhZFHjZr+DDMENcSd/JS8KhCDk0Hq1EHuucvwYmJhQ17Dd+u51t/Hv247t7qGdjSYiS4YuXontwEZw3ehe4Bqj8BAAD//yXb5i1nBwAA\n\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xWW2tjNxB+P79C+F1ep92AK+pCmk3bh2Y3JFAoLISxNOujWrfq4rX31xfpHNvnYgcTNlC9WGdGo2/mm4sMTv6FPkhrGNlcVWtpBCNP6DeS4w3nNplYaYwgIAKrCDGgkZEawYWIvhUEBxwZWacl0rALEXVFiIIlqpBtSNF4gxHDVNp3XKVsTEMDw8gk+oSTchKEsEaDgRX6ad9MW4GMPCK3hkuFFaW06rrvl8CnkGJtvfwGUVozXc+L5eZqiRH20d028I9W4YnQGv/ZPkL6VcaaGjBm93Yx3ZmQPN5tZYih8klhYBUl4OTv3iZX8CjBbUSTIw3lE5zLG4/BJs+xPSTQKbvTaGJWbtAvW8UKY/lVMjSbrxB5XXbJCYhYtq4IR9CTyRgJNy0IPZZA+2lFu3NWXObGd0jlr9IIaVb/y4xahY/4JYPsiX0hxIqQcZ1eEEtIy3+Qx1I6J9v48uYdpmM4GHokv47B/snGsT/6jl3iaXDIM7SzPrYllreMzGcFJoJfYXxoRfMfKkICKuTR+tbjeaDgXAcrB99E++HQTD02jo14qMazfIxuf8s6e2EYD/jc0+bRKckhMHI1YkbnzvyzE8zpcCJqpyBia9QhIi/Vsz9HCCFgjI2lCzqHA69RJIV+CsrVMCCAexklB0WdFawZUYTsAyu5twp9/05K1rhj5LY1vcn0hk9G7Q6Y1mUb6xk5kFru7bXSx2F15sWtiSAN+g6a1LBCRn4+er6v8SeH/JcDKrdagxHH0CmZvNvfP+lKKW2m8KJDRkhag989g5Ps8+Tz5GgwaqNm9Ub5UfhvwhB7MkK4S7lzdE+oUVu/Y+Tq/exedjRKavnqC06xVRL0iEF+u4gxZ8VzGYYDyrhLi/lMD6S4jR6Kbja9HiobDxfFwZN27YH3I3WsPYbaKrG4HmiOj/PiTG4PNXTugLNKUYdeWrH4cZbX0LkQpc4FvMCtswZNlKDOFcThFXxdWVyfyepPF1bFRfZoNt0kb0Al/M1b3b/vi0Ql2jd2JH+AWLPDaJpmDjrHGkru/35++PTh+ePN/d33Rysj+SXIp4eb2z1u/vv01JvEeeV3ZjAAbWBESZO21X8BAAD//0SxZ2rFCwAA\n\n- path: /etc/kubernetes/addons/azure-storage-classes.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8yQTUs0MRCE7/kVzd4zL3t7ydWrgrjgVXon5RJmkgzdnQH99TIfLqhXFzx3nkrVw1N6hmiqJZBaFb6gG/5rl+q/+XiG8dENqcRAp+14N7KqyzCObBwcUeGMQBGv3EZzRFxKNbZUiy5n+oztF7JbIruhnSEFhvWfpH6n/fom0MGk4eCIRj5j3GO+Qv3Y1CBeIXPqcWUmqXNa5kDCN4Tfm8DHpIPz3rvfWp658AXRT4KcWv5p4FYjJhbOMMiavXV92Mq4q3Xu+9qK2duEQI9bxZf7p9NNFKhxiSzxLzs47R1XCR8BAAD//1fQzbL+AgAA\n\n- path: /etc/kubernetes/addons/kube-tiller-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RUXWvbMBR9968QfXdKWAdDjELXhlJoS0i6vY4b+SzRqq9JV6HZrx92Gtd2spI+dDA9WdK5Oh+6FgX9DTFp76RYj4tH7Sop5ohrrXChlM+OCwumiphkIYQjCylYG4P4PE2BFKR4zAuUaZMYthDC0AIm1RWi2YkOjDTS/lSZnBixTFsSKU44Zpw0SKoq7yw5WiKO+mXWVzV24lKOmDzpxOmkKMuy6DqIC1IjyrzyUf8m1t6NHj815evxAkw7g5dbDTNv8EW7Srvlayb/jZfoDWb4UdNQ0NfR5/CKoUKIPSut8p0sqqx2RcqLn1CcZFGKg/d77K0O0x72Sy/DbmgUghQrGNvMBmTvmWmfrKwQjN/83WAKULXi4CM30st9sfWeFGdn4w9nzZwpLsHTZrWFJRgo9vEI+7wJaG/xZroXMp4Yrv5Mgx6+asxYDH7Q/zl3hg2GGFv1XVf16Drbd3fQ4e7g5rvX9PdDqBDKOybtEFuOUsCtXwh33fBwc3s7mX2/v7ibzKcXl5MWIMSaTN57C7dDW1pCis8v8T007PMAdd6ijF7DIaVp9AvIzskr5nAN7i4JEYhXUpzuivp7baN+7Kxrp1mTuYKhzRzKuypJMe4AWFv4zAf29tLdsaRuRG2K08GP8sohEVTpN7tuq97XdkTyOSqkroiIXxmJU1+YCvnABV9Ov86e4ec9uIX1cXOg4q7ZOFRktNVHs97W4DdR9iqcrzDvPWT1qJ+gwRPgkxRGu/xU/AkAAP//Gh4NlE4IAAA=\n\n\n\n- path: \"/etc/systemd/system/kubectl-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubectl extraction\n    Requires=docker.service\n    After=docker.service\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/kubectldir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/kubectldir/\"\n    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    KUBELET_CLUSTER_DNS=',variables('kubeDNSServiceIP'),'\n    KUBELET_API_SERVERS=',concat('https://', variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))], ':443'),'\n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    KUBELET_NETWORK_PLUGIN=\n    KUBELET_MAX_PODS=110\n    DOCKER_OPTS=\n    KUBELET_NODE_LABELS=kubernetes.io/role=master\n    KUBELET_POD_INFRA_CONTAINER_IMAGE=',variables('kubernetesPodInfraContainerSpec'),'\n    KUBELET_NODE_STATUS_UPDATE_FREQUENCY=',variables('kubernetesNodeStatusUpdateFrequency'),'\n    KUBE_CTRL_MGR_NODE_MONITOR_GRACE_PERIOD=',variables('kubernetesCtrlMgrNodeMonitorGracePeriod'),'\n    KUBE_CTRL_MGR_POD_EVICTION_TIMEOUT=',variables('kubernetesCtrlMgrPodEvictionTimeout'),'\n    KUBE_CTRL_MGR_ROUTE_RECONCILIATION_PERIOD=',variables('kubernetesCtrlMgrRouteReconciliationPeriod'),'\n    KUBELET_IMAGE_GC_HIGH_THRESHOLD=',variables('gchighthreshold'),'\n    KUBELET_IMAGE_GC_LOW_THRESHOLD=',variables('gclowthreshold'),'\n\n  \n    KUBELET_NON_MASQUERADE_CIDR=--non-masquerade-cidr=',variables('kubernetesNonMasqueradeCidr'),'\n    KUBELET_REGISTER_NODE=--register-node=true\n    KUBELET_REGISTER_WITH_TAINTS=--register-with-taints=',variables('registerWithTaints'),'\n  \n  \n\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RV3W7bOBO911MQaS++74JW84Nt14Uu3FhJjDh2KslIF2kg0NJY4oYiteTIjnfrd19QdhJLVrq7MGCQM3POcGYOxfuZ5PjgDMEkmpfIlfSuqzkIQCeAPyquwXipSh5B9wzoJU/AGSwQdNvo3Ifb1YMTgEGm0WNixdbG8eWSayULkHjBBXguYOKmsGCVQPdxlyuskgSM8Z84hsiwMt7x2anjP0ESWq5bDZ4759KdM5MTV5Xosj8rDW6iJDIuQZtnqp7JO3DFY8o1oSVxl0y7gs9fMr+RgybkiC/IPXn/v0JVEskPkmkoyfejNsP3I/KDrBJCxf8JFUA+kAfymWAOkmxT13BK51ymB+kPDZ/Jgh91VbCjKdgjUJMzDYdszjsS5dwQbggjJdPImSArpR+ZVpVMCSqC1l+VBjWwgthRawkIFmMq6DvvCMkRS9N33YxjXs17iSpq/m3c/rKGGPfs+NfjX97Vm0QVds709Pjk7OTTx9PjViHGVmLWJkFB6IpIwB4vl2c9TMpYA2oO5sT71ATRLQrmyOYCDKFIJLOdENxgZygvfx7quZXRdVO3Iia6kuS7QwilEtDLlcHdtuRpY6v5kgvIIN0ZdLFbLJWoCvDcFJZ9+9cym7Xp139atTx2grqS/ZeFXnVE2Blvz+r2W4a3ATtR7CF2lv5OPh0wlfVfFgfE9uLujb/fMhwWZ/SyCWgaLOD9cHp+7Qfx9DYKO9IZI9wENJp+c/tGySvGMpDo3jDJMkhHKUjkuKYhIHKZmf6/j9wVQ8j7v65nX/yxH8Wjm8Glv9mZCXHzdQnalkOeL++zy57N2hIlFzw7HMmrrwHR2y8ufcNdqpRyudCMvnz2KC9YBt7R6yFvp8N4NLkIBvH5dBINRhM/2B38qEHG0lSDMd6HXv1r+oRQqz21e6gr2It4zXYx+hafnX78cBYfb/4h4GTTZT3dNDKDtDeX2lcF9EHxBZN8AQZpyTA/0OOz1zRwiagMgqapNN7rAc7HszDyg3g4CTfd4apgXHq7bU+ohIlGoFQpUMHmIMx++yfToR+PB1/8cdhqeCJUldJSqyVPQXv1+9UR8CyZVnF1eO93o2RzUta8JwcNGTeo1/+RRgLaZ4KWosq43OvTxI/upsF1fDueXY4mzVYV7MlOZb+tN4NvVoCtntatMvWzTqsyZQh0YaUOMll7rdaF0SCahfHsdjiI/Pgi8L/O/Mn5b03CWvQ0S2jOs5xirsHkSqRe66rGl+fx1ejyKo6uAj+8mo6Hb9BYtf+UZTy9e4tk6Z3sy90fRLPAjy8HkR9234jJdBLfDMKvMz8YDP34fDQMugMD/3JUi9Q2ZtPluBtFV7G941G4cZz7kTTIhHhw7phESL+svaISyGllQPeQ6QzQ+TsAAP//YsV6AvAJAAA=\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -e\n\n\n\n\n\n\n    sed -i \"/--oidc-client-id\\|--oidc-issuer-url\\|--oidc-username-claim/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n    sed -i \"s|<kubernetesAddonManagerSpec>|',variables('kubernetesAddonManagerSpec'),'|g\" \"/etc/kubernetes/manifests/kube-addon-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeServiceCidr>|',variables('kubeServiceCidr'),'|g; s|<masterEtcdClientPort>|',variables('masterEtcdClientPort'),'|g; s|<kubernetesAPIServerIP>|',variables('kubernetesAPIServerIP'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<masterFqdnPrefix>|',variables('masterFqdnPrefix'),'|g; s|<allocateNodeCidrs>|',variables('allocateNodeCidrs'),'|g; s|<kubeClusterCidr>|',variables('kubeClusterCidr'),'|g; s|<kubernetesCtrlMgrNodeMonitorGracePeriod>|',variables('kubernetesCtrlMgrNodeMonitorGracePeriod'),'|g; s|<kubernetesCtrlMgrPodEvictionTimeout>|',variables('kubernetesCtrlMgrPodEvictionTimeout'),'|g; s|<kubernetesCtrlMgrRouteReconciliationPeriod>|',variables('kubernetesCtrlMgrRouteReconciliationPeriod'),'|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeClusterCidr>|',variables('kubeClusterCidr'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    sed -i \"s|<kubernetesKubeDNSSpec>|',variables('kubernetesKubeDNSSpec'),'|g; s|<kubernetesDNSMasqSpec>|',variables('kubernetesDNSMasqSpec'),'|g; s|<kubernetesExecHealthzSpec>|',variables('kubernetesExecHealthzSpec'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n    sed -i \"s|<kubernetesHeapsterSpec>|',variables('kubernetesHeapsterSpec'),'|g; s|<kubernetesAddonResizerSpec>|',variables('kubernetesAddonResizerSpec'),'|g\" \"/etc/kubernetes/addons/kube-heapster-deployment.yaml\"\n\n    sed -i \"s|<kubernetesDashboardSpec>|',variables('kubernetesDashboardSpec'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n\n    sed -i \"s|<kubernetesTillerSpec>|',variables('kubernetesTillerSpec'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPURequests>|',variables('kubernetesTillerCPURequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryRequests>|',variables('kubernetesTillerMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPULimit>|',variables('kubernetesTillerCPULimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryLimit>|',variables('kubernetesTillerMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubeDNSServiceIP>|',variables('kubeDNSServiceIP'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n\n\n    sed -i \"/<kubernetesEnableRbac>/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/<kubernetesEnableRbac>/d\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n\n\n\n\n\n    sed -i \"/requestheader-client-ca-file/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/proxy-client-cert-file/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/proxy-client-key-file/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/requestheader-allowed-names/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/requestheader-extra-headers-prefix/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/requestheader-group-headers/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"/requestheader-username-headers/d\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n    sed -i \"s|<etcdApiVersion>|etcd2|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n- path: \"/opt/azure/containers/mountetcd.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('mountetcdScript'),'\n\n- path: \"/etc/systemd/system/etcd.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=etcd - highly-available key value store\n    Documentation=https://github.com/coreos/etcd\n    Documentation=man:etcd\n    After=network.target\n    Wants=network-online.target\n    [Service]\n    Environment=DAEMON_ARGS=\n    Environment=ETCD_NAME=%H\n    Environment=ETCD_DATA_DIR=/var/lib/etcd/default\n    EnvironmentFile=-/etc/default/%p\n    Type=notify\n    User=etcd\n    PermissionsStartOnly=true\n    ExecStart=/usr/bin/etcd $DAEMON_ARGS\n    Restart=always\n    [Install]\n    WantedBy=multi-user.target\n    Alias=etcd.service\n\nruncmd: \n- apt-mark hold walinuxagent \n- /bin/echo DAEMON_ARGS=--name \"',variables('masterVMNames')[copyIndex(variables('masterOffset'))],'\" --initial-advertise-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --listen-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --advertise-client-urls \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\" --listen-client-urls \"',concat(variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))], ',http://127.0.0.1:', variables('masterEtcdClientPort')),'\" --initial-cluster-token \"k8s-etcd-cluster\" --initial-cluster \"',variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)],' --data-dir \"/var/lib/etcddisk\"\" --initial-cluster-state \"new\" | tee -a /etc/default/etcd\n- sudo /bin/chown -R etcd:etcd /var/lib/etcd/default\n- /opt/azure/containers/mountetcd.sh\n- sudo /bin/chown -R etcd:etcd /var/lib/etcddisk\n- systemctl stop etcd\n- sudo -u etcd rm -rf /var/lib/etcd/default\n- sudo /bin/sed -i s/Restart=on-abnormal/Restart=always/g /lib/systemd/system/etcd.service\n- systemctl daemon-reload\n- systemctl restart etcd\n- for i in $(seq 1 20); do curl --max-time 60 http://127.0.0.1:2379/v2/machines; [ $? -eq 0 ] && break || sleep 5; done\n- retrycmd_if_failure() { for i in 1 2 3 4 5; do $@; [ $? -eq 0  ] && break || sleep 5; done ; }\n- retrycmd_if_failure apt-get update\n- retrycmd_if_failure apt-get install -y apt-transport-https ca-certificates\n- retrycmd_if_failure curl --max-time 60 -fsSL https://aptdocker.azureedge.net/gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- retrycmd_if_failure apt-get update\n- retrycmd_if_failure apt-get install -y ebtables\n- retrycmd_if_failure apt-get install -y docker-engine\n- systemctl restart docker\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n- /usr/lib/apt/apt.systemd.daily\n\n- apt-mark unhold walinuxagent\n- touch /opt/azure/containers/runcmd.complete\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "false",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshPublicKeyData')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "dataDisks": [
            {
              "createOption": "Empty",
              "diskSizeGB": "[variables('etcdDiskSizeGB')]",
              "lun": 0,
              "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'-etcddisk')]",
              "vhd": {
                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/', variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')),'-etcddisk.vhd')]"
              }
            }
          ],
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSku')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')),'-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat(variables('generatorCode'), '-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
        "orchestrator": "[variables('orchestratorNameVersionTag')]",
        "poolName": "master",
        "resourceNameSuffix": "[variables('nameSuffix')]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'/cse', copyIndex(variables('masterOffset')))]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' ',variables('provisionScriptParametersMaster'),' /usr/bin/nohup /bin/bash -c \"stat /opt/azure/containers/provision.complete || /bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {},
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentStorageAccountPrefixes": {
      "type": "array",
      "value": "[variables('storageAccountPrefixes')]"
    },
    "agentStorageAccountSuffix": {
      "type": "string",
      "value": "[variables('storageAccountBaseName')]"
    },
    "agentpool1StorageAccountCount": {
      "type": "int",
      "value": "[variables('agentpool1StorageAccountsCount')]"
    },
    "agentpool1StorageAccountOffset": {
      "type": "int",
      "value": "[variables('agentpool1StorageAccountOffset')]"
    },
    "agentpool1SubnetName": {
      "type": "string",
      "value": "[variables('agentpool1SubnetName')]"
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "primaryAvailabilitySetName": {
      "type": "string",
      "value": "[variables('primaryAvailabilitySetName')]"
    },
    "resourceGroup": {
      "type": "string",
      "value": "[variables('resourceGroup')]"
    },
    "routeTableName": {
      "type": "string",
      "value": "[variables('routeTableName')]"
    },
    "securityGroupName": {
      "type": "string",
      "value": "[variables('nsgName')]"
    },
    "subnetName": {
      "type": "string",
      "value": "[variables('subnetName')]"
    },
    "virtualNetworkName": {
      "type": "string",
      "value": "[variables('virtualNetworkName')]"
    }
  }
}
